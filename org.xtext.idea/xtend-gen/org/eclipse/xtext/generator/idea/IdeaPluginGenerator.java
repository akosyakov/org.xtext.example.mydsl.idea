package org.eclipse.xtext.generator.idea;

import com.google.common.base.Objects;
import java.util.List;
import java.util.Set;
import javax.inject.Inject;
import org.eclipse.xpand2.XpandExecutionContext;
import org.eclipse.xpand2.output.Outlet;
import org.eclipse.xpand2.output.Output;
import org.eclipse.xpand2.output.OutputImpl;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.AbstractRule;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.generator.Generator;
import org.eclipse.xtext.generator.Naming;
import org.eclipse.xtext.generator.Xtend2ExecutionContext;
import org.eclipse.xtext.generator.Xtend2GeneratorFragment;
import org.eclipse.xtext.generator.idea.IdeaPluginExtension;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class IdeaPluginGenerator extends Xtend2GeneratorFragment {
  private static String META_INF_PLUGIN = "META_INF_PLUGIN";
  
  private static String PLUGIN = "PLUGIN";
  
  private static String DOT_IDEA = "DOT_IDEA";
  
  private String encoding;
  
  private String fileExtension;
  
  private Set<String> libraries = CollectionLiterals.<String>newHashSet();
  
  private String pathIdeaPluginProject;
  
  @Inject
  @Extension
  private IdeaPluginExtension _ideaPluginExtension;
  
  public void generate(final Grammar grammar, final Xtend2ExecutionContext ctx) {
    String outlet_src_gen = Generator.SRC_GEN;
    String outlet_src = Generator.SRC;
    boolean _notEquals = (!Objects.equal(this.pathIdeaPluginProject, null));
    if (_notEquals) {
      Outlet _outlet = new Outlet("IDEA_SRC_GEN");
      final Procedure1<Outlet> _function = new Procedure1<Outlet>() {
        public void apply(final Outlet it) {
          it.setName("IDEA_SRC_GEN");
          it.setPath((IdeaPluginGenerator.this.pathIdeaPluginProject + "/src-gen"));
        }
      };
      final Outlet newOutlet = ObjectExtensions.<Outlet>operator_doubleArrow(_outlet, _function);
      XpandExecutionContext _xpandExecutionContext = ctx.getXpandExecutionContext();
      Output _output = _xpandExecutionContext.getOutput();
      _output.addOutlet(newOutlet);
      String _name = newOutlet.getName();
      outlet_src_gen = _name;
      Outlet _outlet_1 = new Outlet("IDEA_SRC");
      final Procedure1<Outlet> _function_1 = new Procedure1<Outlet>() {
        public void apply(final Outlet it) {
          it.setName("IDEA_SRC");
          it.setPath((IdeaPluginGenerator.this.pathIdeaPluginProject + "/src"));
        }
      };
      final Outlet newSrcOutlet = ObjectExtensions.<Outlet>operator_doubleArrow(_outlet_1, _function_1);
      XpandExecutionContext _xpandExecutionContext_1 = ctx.getXpandExecutionContext();
      Output _output_1 = _xpandExecutionContext_1.getOutput();
      _output_1.addOutlet(newSrcOutlet);
      String _name_1 = newSrcOutlet.getName();
      outlet_src = _name_1;
    }
    Naming _naming = this.getNaming();
    String _ideaSetupName = this._ideaPluginExtension.getIdeaSetupName(grammar);
    String _asPath = _naming.asPath(_ideaSetupName);
    String _plus = (_asPath + ".java");
    CharSequence _compileStandaloneSetup = this.compileStandaloneSetup(grammar);
    ctx.writeFile(outlet_src, _plus, _compileStandaloneSetup);
    String _languagePath = this._ideaPluginExtension.getLanguagePath(grammar);
    CharSequence _compileLanguage = this.compileLanguage(grammar);
    ctx.writeFile(outlet_src_gen, _languagePath, _compileLanguage);
    String _fileTypePath = this._ideaPluginExtension.getFileTypePath(grammar);
    CharSequence _compileFileType = this.compileFileType(grammar);
    ctx.writeFile(outlet_src_gen, _fileTypePath, _compileFileType);
    String _fileTypeFactoryPath = this._ideaPluginExtension.getFileTypeFactoryPath(grammar);
    CharSequence _compileFileTypeFactory = this.compileFileTypeFactory(grammar);
    ctx.writeFile(outlet_src_gen, _fileTypeFactoryPath, _compileFileTypeFactory);
    String _fileImplPath = this._ideaPluginExtension.fileImplPath(grammar);
    CharSequence _compileFileImpl = this.compileFileImpl(grammar);
    ctx.writeFile(outlet_src_gen, _fileImplPath, _compileFileImpl);
    String _tokenTypesPath = this._ideaPluginExtension.getTokenTypesPath(grammar);
    CharSequence _compileTokenTypes = this.compileTokenTypes(grammar);
    ctx.writeFile(outlet_src_gen, _tokenTypesPath, _compileTokenTypes);
    String _lexerPath = this._ideaPluginExtension.getLexerPath(grammar);
    CharSequence _compileLexer = this.compileLexer(grammar);
    ctx.writeFile(outlet_src_gen, _lexerPath, _compileLexer);
    String _kenTypeProviderPath = this._ideaPluginExtension.tokenTypeProviderPath(grammar);
    CharSequence _compileTokenTypeProvider = this.compileTokenTypeProvider(grammar);
    ctx.writeFile(outlet_src_gen, _kenTypeProviderPath, _compileTokenTypeProvider);
    String _parserDefinitionPath = this._ideaPluginExtension.getParserDefinitionPath(grammar);
    CharSequence _compileParserDefinition = this.compileParserDefinition(grammar);
    ctx.writeFile(outlet_src_gen, _parserDefinitionPath, _compileParserDefinition);
    String _syntaxHighlighterPath = this._ideaPluginExtension.getSyntaxHighlighterPath(grammar);
    CharSequence _compileSyntaxHighlighter = this.compileSyntaxHighlighter(grammar);
    ctx.writeFile(outlet_src_gen, _syntaxHighlighterPath, _compileSyntaxHighlighter);
    String _syntaxHighlighterFactoryPath = this._ideaPluginExtension.getSyntaxHighlighterFactoryPath(grammar);
    CharSequence _compileSyntaxHighlighterFactory = this.compileSyntaxHighlighterFactory(grammar);
    ctx.writeFile(outlet_src_gen, _syntaxHighlighterFactoryPath, _compileSyntaxHighlighterFactory);
    boolean _notEquals_1 = (!Objects.equal(this.pathIdeaPluginProject, null));
    if (_notEquals_1) {
      OutputImpl output = new OutputImpl();
      this.addOutlet(output, IdeaPluginGenerator.PLUGIN, this.pathIdeaPluginProject);
      this.addOutlet(output, IdeaPluginGenerator.META_INF_PLUGIN, (this.pathIdeaPluginProject + "/META-INF"));
      this.addOutlet(output, IdeaPluginGenerator.DOT_IDEA, (this.pathIdeaPluginProject + "/.idea"));
      CharSequence _compilePluginXml = this.compilePluginXml(grammar);
      this.writeFile(output, IdeaPluginGenerator.META_INF_PLUGIN, "plugin.xml", _compilePluginXml);
      String _iml = this.iml();
      CharSequence _compileIml = this.compileIml(grammar);
      this.writeFile(output, IdeaPluginGenerator.PLUGIN, _iml, _compileIml);
      CharSequence _compileModulesXml = this.compileModulesXml(grammar);
      this.writeFile(output, IdeaPluginGenerator.DOT_IDEA, "modules.xml", _compileModulesXml);
      CharSequence _compileMiscXml = this.compileMiscXml(grammar);
      this.writeFile(output, IdeaPluginGenerator.DOT_IDEA, "misc.xml", _compileMiscXml);
    }
  }
  
  public String iml() {
    int _lastIndexOf = this.pathIdeaPluginProject.lastIndexOf("/");
    int _plus = (_lastIndexOf + 1);
    String _substring = this.pathIdeaPluginProject.substring(_plus);
    return (_substring + ".iml");
  }
  
  public void addOutlet(final Output output, final String outletName, final String path) {
    String _encoding = this.getEncoding();
    Outlet _outlet = new Outlet(false, _encoding, outletName, false, path);
    output.addOutlet(_outlet);
  }
  
  public void writeFile(final Output output, final String outletName, final String filename, final CharSequence contents) {
    output.openFile(filename, outletName);
    String _string = contents.toString();
    output.write(_string);
    output.closeFile();
  }
  
  public String getEncoding() {
    boolean _notEquals = (!Objects.equal(this.encoding, null));
    if (_notEquals) {
      return this.encoding;
    }
    return System.getProperty("file.encoding");
  }
  
  public boolean addLibrary(final String library) {
    return this.libraries.add(library);
  }
  
  public String setFileExtensions(final String fileExtensions) {
    String[] _split = fileExtensions.split("\\s*,\\s*");
    String _get = _split[0];
    return this.fileExtension = _get;
  }
  
  public String setEncoding(final String encoding) {
    return this.encoding = encoding;
  }
  
  public String setPathIdeaPluginProject(final String pathIdeaPluginProject) {
    return this.pathIdeaPluginProject = pathIdeaPluginProject;
  }
  
  public CharSequence compileModulesXml(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<project version=\"4\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<component name=\"ProjectModuleManager\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<modules>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<module fileurl=\"file://$PROJECT_DIR$/");
    String _iml = this.iml();
    _builder.append(_iml, "      ");
    _builder.append("\" filepath=\"$PROJECT_DIR$/");
    String _iml_1 = this.iml();
    _builder.append(_iml_1, "      ");
    _builder.append("\" />");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("</modules>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</component>");
    _builder.newLine();
    _builder.append("</project>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileMiscXml(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<project version=\"4\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_6\" assert-keyword=\"true\" jdk-15=\"true\" project-jdk-name=\"IDEA IC-123.72\" project-jdk-type=\"IDEA JDK\" />");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<output url=\"file://$PROJECT_DIR$/out\" />");
    _builder.newLine();
    _builder.append("</project>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compilePluginXml(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<idea-plugin version=\"2\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<id>");
    String _languageID = this._ideaPluginExtension.getLanguageID(grammar);
    _builder.append(_languageID, "\t");
    _builder.append("</id>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<name>");
    String _simpleName = this._ideaPluginExtension.getSimpleName(grammar);
    _builder.append(_simpleName, "\t");
    _builder.append(" Support</name>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<description>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("This plugin enables smart editing of ");
    String _simpleName_1 = this._ideaPluginExtension.getSimpleName(grammar);
    _builder.append(_simpleName_1, "      ");
    _builder.append(" files.");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</description>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<version>1.0.0</version>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<vendor>My Company</vendor>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<idea-version since-build=\"123.72\"/>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<extensions defaultExtensionNs=\"com.intellij\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<lang.syntaxHighlighterFactory key=\"");
    String _languageID_1 = this._ideaPluginExtension.getLanguageID(grammar);
    _builder.append(_languageID_1, "\t\t");
    _builder.append("\" implementationClass=\"");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "\t\t");
    _builder.append(".");
    String _syntaxHighlighterFactoryClassName = this._ideaPluginExtension.getSyntaxHighlighterFactoryClassName(grammar);
    _builder.append(_syntaxHighlighterFactoryClassName, "\t\t");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<lang.parserDefinition language=\"");
    String _languageID_2 = this._ideaPluginExtension.getLanguageID(grammar);
    _builder.append(_languageID_2, "\t\t");
    _builder.append("\" implementationClass=\"");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "\t\t");
    _builder.append(".");
    String _parserDefinitionClassName = this._ideaPluginExtension.getParserDefinitionClassName(grammar);
    _builder.append(_parserDefinitionClassName, "\t\t");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("<fileTypeFactory implementation=\"");
    String _langPackageName_1 = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName_1, "\t\t");
    _builder.append(".");
    String _fileTypeFactoryClassName = this._ideaPluginExtension.getFileTypeFactoryClassName(grammar);
    _builder.append(_fileTypeFactoryClassName, "\t\t");
    _builder.append("\"/>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("</extensions>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</idea-plugin>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileIml(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<module type=\"PLUGIN_MODULE\" version=\"4\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<component name=\"DevKit.ModuleBuildProperties\" url=\"file://$MODULE_DIR$/META-INF/plugin.xml\" />");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<exclude-output />");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<content url=\"file://$MODULE_DIR$\">");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<sourceFolder url=\"file://$MODULE_DIR$/test\" isTestSource=\"true\" />");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</content>");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("<orderEntry type=\"jdk\" jdkName=\"IDEA IC-123.72\" jdkType=\"IDEA JDK\" />");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<orderEntry type=\"sourceFolder\" forTests=\"false\" />");
    _builder.newLine();
    {
      for(final String library : this.libraries) {
        _builder.append("    ");
        _builder.append("<orderEntry type=\"module-library\">");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("  ");
        _builder.append("<library>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("<CLASSES>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("      ");
        _builder.append("<root url=\"jar://");
        _builder.append(library, "          ");
        _builder.append("!/\" />");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("</CLASSES>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("<JAVADOC />");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("    ");
        _builder.append("<SOURCES />");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("  ");
        _builder.append("</library>");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("</orderEntry>");
        _builder.newLine();
      }
    }
    _builder.append("  ");
    _builder.append("</component>");
    _builder.newLine();
    _builder.append("</module>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compilePsiElement(final Grammar grammar, final AbstractRule rule) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _psiPackageName = this._ideaPluginExtension.getPsiPackageName(grammar);
    _builder.append(_psiPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      boolean _hasMultipleAssigment = this._ideaPluginExtension.hasMultipleAssigment(rule);
      if (_hasMultipleAssigment) {
        _builder.newLine();
        _builder.append("import java.util.List;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("import com.intellij.psi.");
    String _psiElementSuperClassName = this._ideaPluginExtension.getPsiElementSuperClassName(rule);
    _builder.append(_psiElementSuperClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public interface ");
    String _psiElementClassName = this._ideaPluginExtension.getPsiElementClassName(rule);
    _builder.append(_psiElementClassName, "");
    _builder.append(" extends ");
    String _psiElementSuperClassName_1 = this._ideaPluginExtension.getPsiElementSuperClassName(rule);
    _builder.append(_psiElementSuperClassName_1, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      List<Assignment> _assignmentsWithoutName = this._ideaPluginExtension.getAssignmentsWithoutName(rule);
      for(final Assignment assignment : _assignmentsWithoutName) {
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        String _typeName = this._ideaPluginExtension.getTypeName(assignment);
        _builder.append(_typeName, "\t");
        _builder.append(" ");
        String _getter = this._ideaPluginExtension.getGetter(assignment);
        _builder.append(_getter, "\t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("void ");
        String _setter = this._ideaPluginExtension.getSetter(assignment);
        _builder.append(_setter, "\t");
        _builder.append("(");
        String _typeName_1 = this._ideaPluginExtension.getTypeName(assignment);
        _builder.append(_typeName_1, "\t");
        _builder.append(" ");
        String _feature = assignment.getFeature();
        _builder.append(_feature, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileFileImpl(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _psiImplPackageName = this._ideaPluginExtension.getPsiImplPackageName(grammar);
    _builder.append(_psiImplPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.psi.impl.BaseXtextFile;");
    _builder.newLine();
    _builder.append("import ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(".");
    String _fileTypeClassName = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _langPackageName_1 = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName_1, "");
    _builder.append(".");
    String _languageClassName = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.FileType;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.FileViewProvider;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public final class ");
    String _fileImplClassName = this._ideaPluginExtension.getFileImplClassName(grammar);
    _builder.append(_fileImplClassName, "");
    _builder.append(" extends BaseXtextFile {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _fileImplClassName_1 = this._ideaPluginExtension.getFileImplClassName(grammar);
    _builder.append(_fileImplClassName_1, "\t");
    _builder.append("(FileViewProvider viewProvider) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(viewProvider, ");
    String _languageClassName_1 = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName_1, "\t\t");
    _builder.append(".INSTANCE);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public FileType getFileType() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _fileTypeClassName_1 = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName_1, "\t\t");
    _builder.append(".INSTANCE;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileFileTypeFactory(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.FileTypeConsumer;");
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.FileTypeFactory;");
    _builder.newLine();
    _builder.append("import org.jetbrains.annotations.NotNull;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _fileTypeFactoryClassName = this._ideaPluginExtension.getFileTypeFactoryClassName(grammar);
    _builder.append(_fileTypeFactoryClassName, "");
    _builder.append(" extends FileTypeFactory {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void createFileTypes(@NotNull FileTypeConsumer consumer) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("consumer.consume(");
    String _fileTypeClassName = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName, "\t\t");
    _builder.append(".INSTANCE, ");
    String _fileTypeClassName_1 = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName_1, "\t\t");
    _builder.append(".DEFAULT_EXTENSION);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileFileType(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import javax.swing.Icon;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.LanguageFileType;");
    _builder.newLine();
    _builder.append("import org.jetbrains.annotations.NonNls;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public final class ");
    String _fileTypeClassName = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName, "");
    _builder.append(" extends LanguageFileType {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final ");
    String _fileTypeClassName_1 = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName_1, "\t");
    _builder.append(" INSTANCE = new ");
    String _fileTypeClassName_2 = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName_2, "\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NonNls ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final String DEFAULT_EXTENSION = \"");
    _builder.append(this.fileExtension, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _fileTypeClassName_3 = this._ideaPluginExtension.getFileTypeClassName(grammar);
    _builder.append(_fileTypeClassName_3, "\t");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(");
    String _languageClassName = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName, "\t\t");
    _builder.append(".INSTANCE);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getDefaultExtension() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return DEFAULT_EXTENSION;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getDescription() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"");
    String _simpleName = this._ideaPluginExtension.getSimpleName(grammar);
    _builder.append(_simpleName, "\t\t");
    _builder.append(" files\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Icon getIcon() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"");
    String _simpleName_1 = this._ideaPluginExtension.getSimpleName(grammar);
    _builder.append(_simpleName_1, "\t\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileLanguage(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.idea.lang.AbstractXtextLanguage;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.google.inject.Injector;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public final class ");
    String _languageClassName = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName, "");
    _builder.append(" extends AbstractXtextLanguage {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final ");
    String _languageClassName_1 = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName_1, "\t");
    _builder.append(" INSTANCE = new ");
    String _languageClassName_2 = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName_2, "\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Injector injector;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    String _languageClassName_3 = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName_3, "\t");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(\"");
    String _languageID = this._ideaPluginExtension.getLanguageID(grammar);
    _builder.append(_languageID, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.injector = new ");
    String _ideaSetupName = this._ideaPluginExtension.getIdeaSetupName(grammar);
    _builder.append(_ideaSetupName, "\t\t");
    _builder.append("().createInjectorAndDoEMFRegistration();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected Injector getInjector() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return injector;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileStandaloneSetup(final Grammar grammar) {
    CharSequence _xblockexpression = null;
    {
      final String setupName = this._ideaPluginExtension.getIdeaSetupName(grammar);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package ");
      Naming _naming = this.getNaming();
      String _packageName = _naming.toPackageName(setupName);
      _builder.append(_packageName, "");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("import org.eclipse.xtext.util.Modules2;");
      _builder.newLine();
      _builder.append("import ");
      Naming _naming_1 = this.getNaming();
      String _setupImpl = _naming_1.setupImpl(grammar);
      _builder.append(_setupImpl, "");
      _builder.append(";");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("import com.google.inject.Guice;");
      _builder.newLine();
      _builder.append("import com.google.inject.Injector;");
      _builder.newLine();
      _builder.append("import com.google.inject.Module;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class ");
      Naming _naming_2 = this.getNaming();
      String _simpleName = _naming_2.toSimpleName(setupName);
      _builder.append(_simpleName, "");
      _builder.append(" extends ");
      Naming _naming_3 = this.getNaming();
      Naming _naming_4 = this.getNaming();
      String _setupImpl_1 = _naming_4.setupImpl(grammar);
      String _simpleName_1 = _naming_3.toSimpleName(_setupImpl_1);
      _builder.append(_simpleName_1, "");
      _builder.append(" {");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("    ");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("public Injector createInjector() {");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("Module runtimeModule = new ");
      Naming _naming_5 = this.getNaming();
      String _guiceModuleRt = _naming_5.guiceModuleRt(grammar);
      _builder.append(_guiceModuleRt, "        ");
      _builder.append("();");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("Module ideaModule = new ");
      String _guiceModuleIdea = this._ideaPluginExtension.guiceModuleIdea(grammar);
      _builder.append(_guiceModuleIdea, "        ");
      _builder.append("();");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("Module mergedModule = Modules2.mixin(runtimeModule, ideaModule);");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("return Guice.createInjector(mergedModule);");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence compileTokenTypes(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import static ");
    String _internalParsingPackageName = this._ideaPluginExtension.getInternalParsingPackageName(grammar);
    _builder.append(_internalParsingPackageName, "");
    _builder.append(".");
    String _parserClassName = this._ideaPluginExtension.getParserClassName(grammar);
    _builder.append(_parserClassName, "");
    _builder.append(".tokenNames;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(".");
    String _languageClassName = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _internalParsingPackageName_1 = this._ideaPluginExtension.getInternalParsingPackageName(grammar);
    _builder.append(_internalParsingPackageName_1, "");
    _builder.append(".");
    String _parserClassName_1 = this._ideaPluginExtension.getParserClassName(grammar);
    _builder.append(_parserClassName_1, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.IElementType;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.TokenSet;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class ");
    String _tokenTypesClassName = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_tokenTypesClassName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final IElementType[] tokenTypes = new IElementType[tokenNames.length];");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final Map<String, IElementType> nameToTypeMap = new HashMap<String, IElementType>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < tokenNames.length; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("tokenTypes[i] = new IElementType(tokenNames[i], ");
    String _languageClassName_1 = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName_1, "\t\t\t");
    _builder.append(".INSTANCE);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("nameToTypeMap.put(tokenNames[i], tokenTypes[i]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final TokenSet COMMENTS = TokenSet.create(tokenTypes[");
    String _parserClassName_2 = this._ideaPluginExtension.getParserClassName(grammar);
    _builder.append(_parserClassName_2, "\t");
    _builder.append(".RULE_SL_COMMENT],");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("tokenTypes[");
    String _parserClassName_3 = this._ideaPluginExtension.getParserClassName(grammar);
    _builder.append(_parserClassName_3, "\t\t\t");
    _builder.append(".RULE_ML_COMMENT]);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final TokenSet LINE_COMMENTS = TokenSet.create(tokenTypes[");
    String _parserClassName_4 = this._ideaPluginExtension.getParserClassName(grammar);
    _builder.append(_parserClassName_4, "\t");
    _builder.append(".RULE_SL_COMMENT]);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final TokenSet BLOCK_COMMENTS = TokenSet.create(tokenTypes[");
    String _parserClassName_5 = this._ideaPluginExtension.getParserClassName(grammar);
    _builder.append(_parserClassName_5, "\t");
    _builder.append(".RULE_ML_COMMENT]);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final TokenSet WHITESPACES = TokenSet.create(tokenTypes[");
    String _parserClassName_6 = this._ideaPluginExtension.getParserClassName(grammar);
    _builder.append(_parserClassName_6, "\t");
    _builder.append(".RULE_WS]);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static final TokenSet STRINGS = TokenSet.create(tokenTypes[");
    String _parserClassName_7 = this._ideaPluginExtension.getParserClassName(grammar);
    _builder.append(_parserClassName_7, "\t");
    _builder.append(".RULE_STRING]);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileLexer(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.antlr.runtime.ANTLRStringStream;");
    _builder.newLine();
    _builder.append("import org.antlr.runtime.CommonToken;");
    _builder.newLine();
    _builder.append("import org.antlr.runtime.Token;");
    _builder.newLine();
    _builder.append("import ");
    String _internalParsingPackageName = this._ideaPluginExtension.getInternalParsingPackageName(grammar);
    _builder.append(_internalParsingPackageName, "");
    _builder.append(".");
    String _antlrLexerClassName = this._ideaPluginExtension.getAntlrLexerClassName(grammar);
    _builder.append(_antlrLexerClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.intellij.lexer.LexerBase;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.IElementType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _lexerClassName = this._ideaPluginExtension.getLexerClassName(grammar);
    _builder.append(_lexerClassName, "");
    _builder.append(" extends LexerBase {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private ");
    String _antlrLexerClassName_1 = this._ideaPluginExtension.getAntlrLexerClassName(grammar);
    _builder.append(_antlrLexerClassName_1, "    ");
    _builder.append(" internalLexer;");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("private CommonToken token;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private CharSequence buffer;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private int startOffset;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private int endOffset;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void start(CharSequence buffer, int startOffset, int endOffset, int initialState) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.buffer = buffer;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.startOffset = startOffset;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.endOffset = endOffset;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String text = buffer.subSequence(startOffset, endOffset).toString();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("internalLexer = new ");
    String _antlrLexerClassName_2 = this._ideaPluginExtension.getAntlrLexerClassName(grammar);
    _builder.append(_antlrLexerClassName_2, "        ");
    _builder.append("(new ANTLRStringStream(text));");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int getState() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return token != null ? token.getType() : 0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public IElementType getTokenType() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locateToken();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (token == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("int type = token.getType();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return ");
    String _tokenTypesClassName = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_tokenTypesClassName, "        ");
    _builder.append(".tokenTypes[type];");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int getTokenStart() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locateToken();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return startOffset + token.getStartIndex();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int getTokenEnd() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locateToken();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return startOffset + token.getStopIndex() + 1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void advance() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("locateToken();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("token = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public CharSequence getBufferSequence() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return buffer;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int getBufferEnd() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return endOffset;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private void locateToken() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (token == null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("token = (CommonToken) internalLexer.nextToken();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (token == Token.EOF_TOKEN) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("token = null;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileTokenTypeProvider(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.generator.idea.TokenTypeProvider;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.IElementType;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _tokenTypeProviderClassName = this._ideaPluginExtension.getTokenTypeProviderClassName(grammar);
    _builder.append(_tokenTypeProviderClassName, "");
    _builder.append(" implements TokenTypeProvider {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static final List<IElementType> I_ELEMENT_TYPES = Arrays.asList(");
    String _tokenTypesClassName = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_tokenTypesClassName, "    ");
    _builder.append(".tokenTypes);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public int getType(IElementType iElementType) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return I_ELEMENT_TYPES.indexOf(iElementType);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileSyntaxHighlighterFactory(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.SingleLazyInstanceSyntaxHighlighterFactory;");
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.SyntaxHighlighter;");
    _builder.newLine();
    _builder.append("import org.jetbrains.annotations.NotNull;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _syntaxHighlighterFactoryClassName = this._ideaPluginExtension.getSyntaxHighlighterFactoryClassName(grammar);
    _builder.append(_syntaxHighlighterFactoryClassName, "");
    _builder.append(" extends SingleLazyInstanceSyntaxHighlighterFactory {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected SyntaxHighlighter createHighlighter() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new ");
    String _syntaxHighlighterClassName = this._ideaPluginExtension.getSyntaxHighlighterClassName(grammar);
    _builder.append(_syntaxHighlighterClassName, "        ");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileSyntaxHighlighter(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.intellij.lexer.Lexer;");
    _builder.newLine();
    _builder.append("import com.intellij.openapi.editor.DefaultLanguageHighlighterColors;");
    _builder.newLine();
    _builder.append("import com.intellij.openapi.editor.colors.TextAttributesKey;");
    _builder.newLine();
    _builder.append("import com.intellij.openapi.fileTypes.SyntaxHighlighterBase;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.IElementType;");
    _builder.newLine();
    _builder.append("import ");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "");
    _builder.append(".");
    String _lexerClassName = this._ideaPluginExtension.getLexerClassName(grammar);
    _builder.append(_lexerClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _parsingPackageName_1 = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName_1, "");
    _builder.append(".");
    String _tokenTypesClassName = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_tokenTypesClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.jetbrains.annotations.NotNull;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _syntaxHighlighterClassName = this._ideaPluginExtension.getSyntaxHighlighterClassName(grammar);
    _builder.append(_syntaxHighlighterClassName, "");
    _builder.append(" extends SyntaxHighlighterBase {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Lexer getHighlightingLexer() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new ");
    String _lexerClassName_1 = this._ideaPluginExtension.getLexerClassName(grammar);
    _builder.append(_lexerClassName_1, "        ");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public TextAttributesKey[] getTokenHighlights(IElementType tokenType) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (");
    String _tokenTypesClassName_1 = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_tokenTypesClassName_1, "        ");
    _builder.append(".STRINGS.contains(tokenType)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("return pack(DefaultLanguageHighlighterColors.STRING);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (");
    String _tokenTypesClassName_2 = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_tokenTypesClassName_2, "\t\t");
    _builder.append(".LINE_COMMENTS.contains(tokenType)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return pack(DefaultLanguageHighlighterColors.LINE_COMMENT);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (");
    String _tokenTypesClassName_3 = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_tokenTypesClassName_3, "\t\t");
    _builder.append(".BLOCK_COMMENTS.contains(tokenType)) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return pack(DefaultLanguageHighlighterColors.BLOCK_COMMENT);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String myDebugName = tokenType.toString();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (myDebugName.matches(\"^\'.*\\\\w.*\'$\")) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return pack(DefaultLanguageHighlighterColors.KEYWORD);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new TextAttributesKey[0];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileParserDefinition(final Grammar grammar) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _parsingPackageName = this._ideaPluginExtension.getParsingPackageName(grammar);
    _builder.append(_parsingPackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.idea.lang.BaseXtextPsiParser;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.idea.lang.IElementTypeProvider;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.psi.impl.PsiEObjectImpl;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.psi.impl.PsiNamedEObjectImpl;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.psi.impl.PsiReferenceEObjectImpl;");
    _builder.newLine();
    _builder.append("import org.jetbrains.annotations.NotNull;");
    _builder.newLine();
    _builder.append("import ");
    String _langPackageName = this._ideaPluginExtension.getLangPackageName(grammar);
    _builder.append(_langPackageName, "");
    _builder.append(".");
    String _languageClassName = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    String _psiImplPackageName = this._ideaPluginExtension.getPsiImplPackageName(grammar);
    _builder.append(_psiImplPackageName, "");
    _builder.append(".");
    String _fileImplClassName = this._ideaPluginExtension.getFileImplClassName(grammar);
    _builder.append(_fileImplClassName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import com.google.inject.Inject;");
    _builder.newLine();
    _builder.append("import com.google.inject.Provider;");
    _builder.newLine();
    _builder.append("import com.intellij.lang.ASTNode;");
    _builder.newLine();
    _builder.append("import com.intellij.lang.ParserDefinition;");
    _builder.newLine();
    _builder.append("import com.intellij.lang.PsiParser;");
    _builder.newLine();
    _builder.append("import com.intellij.lexer.Lexer;");
    _builder.newLine();
    _builder.append("import com.intellij.openapi.project.Project;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.FileViewProvider;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.PsiElement;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.PsiFile;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.IFileElementType;");
    _builder.newLine();
    _builder.append("import com.intellij.psi.tree.TokenSet;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _parserDefinitionClassName = this._ideaPluginExtension.getParserDefinitionClassName(grammar);
    _builder.append(_parserDefinitionClassName, "");
    _builder.append(" implements ParserDefinition {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private IElementTypeProvider elementTypeProvider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Provider<BaseXtextPsiParser> baseXtextPsiParserProvider; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _parserDefinitionClassName_1 = this._ideaPluginExtension.getParserDefinitionClassName(grammar);
    _builder.append(_parserDefinitionClassName_1, "\t");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    String _languageClassName_1 = this._ideaPluginExtension.getLanguageClassName(grammar);
    _builder.append(_languageClassName_1, "\t\t");
    _builder.append(".INSTANCE.injectMembers(this);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Lexer createLexer(Project project) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ");
    String _lexerClassName = this._ideaPluginExtension.getLexerClassName(grammar);
    _builder.append(_lexerClassName, "\t\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public IFileElementType getFileNodeType() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return elementTypeProvider.getFileType();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public TokenSet getWhitespaceTokens() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _tokenTypesClassName = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_tokenTypesClassName, "\t\t");
    _builder.append(".WHITESPACES;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public TokenSet getCommentTokens() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _tokenTypesClassName_1 = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_tokenTypesClassName_1, "\t\t");
    _builder.append(".COMMENTS;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public TokenSet getStringLiteralElements() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return ");
    String _tokenTypesClassName_2 = this._ideaPluginExtension.getTokenTypesClassName(grammar);
    _builder.append(_tokenTypesClassName_2, "\t\t");
    _builder.append(".STRINGS;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public PsiParser createParser(Project project) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return baseXtextPsiParserProvider.get();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public PsiFile createFile(FileViewProvider viewProvider) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ");
    String _fileImplClassName_1 = this._ideaPluginExtension.getFileImplClassName(grammar);
    _builder.append(_fileImplClassName_1, "\t\t");
    _builder.append("(viewProvider);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return SpaceRequirements.MAY;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public PsiElement createElement(ASTNode node) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (elementTypeProvider.getNamedObjectType().equals(node.getElementType())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return new PsiNamedEObjectImpl(node, elementTypeProvider.getNameType());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (elementTypeProvider.getCrossReferenceType().equals(node.getElementType())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return new PsiReferenceEObjectImpl(node);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new PsiEObjectImpl(node);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
